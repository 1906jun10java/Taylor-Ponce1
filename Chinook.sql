-- 2.1 Select
-- select all records from the employee table 
    SELECT * FROM EMPLOYEE;/

 -- select all records fro, the Employee table with the last name 'King'   
    SELECT * FROM EMPLOYEE WHERE LASTNAME = 'KING';

 -- select all records from the employee table where the frist name is Andrew and Reports to is null    
    SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'ANDREW' AND REPORTSTO IS NULL 
    ;/
    
   -- 2.2  ORDER BY
   -- SELECT ALL ALBUMS IN ALBUM TABLE AND SORT RESULTS SET IN DECENDING ORDER BY TITLE 
   SELECT * FROM ALBUM 
   ORDER BY TITLE DESC;
   /
   
   -- SELECT FIRST NAME FROM CUSTOMER AND SORT RESULTS SER IN ASCENDING ORDER BY CITY 
   SELECT FRISTNAME 
   FROM CUSTOMER 
   ORDER BY CITY ASC;
   /
   
 -- 2.3 INSERT INTO 
 
 -- INSERT TWO NEW RECORDS INTO GENRE TABLE 
 INSERT INTO GENRE(GENREID,NAME) VALUES 
 (27,'LOfI'); 
 /
 
 INSERT INTO GENRE (GENREID,NAME) VALUES
 (26 , 'MUMBLERAP');
 
 /
 -- insert two new records into the employee table 
 INSERT INTO EMPLOYEE (EMPLOYEEID ,LASTNAME ,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,
 PHONE,FAX,EMAIL) 
 VALUES (9 , 'PONCE', 'TAYLOR' , 'CEO', NULL, TO_DATE('07-24-1992' ,'mm-dd-yyyy') , TO_DATE('07-03-2019' ,'mm-dd-yyyy') ,'2010 LIGMA CIRCLE DRIVE','ARLINGTON' ,'VIRGINIA','UNITED STATES' ,'22032','7037853203','18002738255','tponce92@yahoo.com');
 /
 
  INSERT INTO EMPLOYEE (EMPLOYEEID ,LASTNAME ,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,
 PHONE,FAX,EMAIL) 

 VALUES (10 , 'MORGAN', 'ALEX' , 'SOCCERPLAYER', NULL, TO_DATE('07-02-1989' ,'mm-dd-yyyy') , TO_DATE('07-03-2019' ,'mm-dd-yyyy') ,'1531 EIFFLE TOWER ST','PARIS' , 'FRANCE','EUROPEAN UNION' ,'201304','7037853260','18002738255','amorgan13@uswnt.com')
; 
 /
 -- insert two new records into the customer table 
 INSERT INTO CUSTOMER( CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
 
 VALUES( 60, 'FAYE','VALENTINE', 'JETS BAIL BONDS', '5003 MARS AVENUE ', 'ATLANTIS', 'EDEN', 'GARDEN', '90210','5713339129','5557629801','FVALENTINE@EDENCENTER.NET',null)
 ;
 /
 
 
 INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
 
 VALUES( 61, 'PABLO','ESCOBAR', 'PLATA O PLOMO CARTEL', '1234 YAYO STREET ', 'MEDELLIN' , 'COLOMBIA', 'SOUTH AMERICA','91234',
 '5715556789','145567239','YAYOLOVER89@CALICARTEL.NET',null)
 ;
 /
 --2.4 Update
 -- Task . update Aaron Mitchell is Customer table to Robert Walter
 UPDATE CUSTOMER 
 SET FIRSTNAME = 'ROBERT', LASTNAME = 'WALTER'
 WHERE CUSTOMERID  = 32 ;
 
 -- UPDATE THE NAME OF ARTIST IN THE ARTIST TABLE " CREEDENCE CLEARWATER REVIVAL" TO "CCR"
 UPDATE ARTIST 
 SET NAME = 'CCR'
 WHERE artistid = 76
; 
/

-- SELECT ALL INVOICES WITH A BILLING ADDRESS LIKE "T%"
SELECT * FROM INVOICE 
WHERE BILLINGADDRESS LIKE 'T%'
;
/

-- SELECT ALL INVOICES THAT HAVE A TOTAL BETWEEN 15 AND 50 
SELECT *FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50
;
/
-- SELECT ALL EMPLOYEES HIRED BETWEEN JUNE 2003 AND MARCH 2004 
SELECT * FROM EMPLOYEE 
WHERE HIREDATE BETWEEN '01-JUN-2003' AND '01-MAR-2004';
/

-- DELETE A RECORD IN CUSTOMER TABLE WHERE THE NAME ROBERT WALTER 
ALTER TABLE INVOICE 
DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER 
WHERE CUSTOMERID =32; 
/
-- SQL FUNCTIONS 
-- CREATE A FUNCTION THAT RETURNS THE CURRENT TIME
-- CREATE A FUNCTION THAT RETURNS THE LENGTH OF NAME IN MEDIATYPE TABLE 
SELECT CURRENT_TIMESTAMP
FROM DUAL;

SELECT LENGTH(NAME)
FROM MEDIATYPE ;

-- CREATE A FUNCTION THAT RETUNRS THE AVERAGE TOTAL OF ALL INVOICES 
-- CREATE A FUNCTION THAT RETURNS THE MOST EXPENSIVE TRACK 

SELECT AVG(TOTAL) 
FROM INVOICE 
;

SELECT MAX(TOTAL)
FROM INVOICE
;
-- 3.3 USER DEFINED SCALAR FUNCTIONS 
CREATE OR REPLACE FUNCTION AVG_PRICE 
RETURN NUMBER 
IS 
X NUMBER;
BEGIN 
SELECT AVG(UNITPRICE)
INTO X 
FROM INVOICELINE;
RETURN X;
END;
/
DECLARE 
Y NUMBER;
BEGIN 
Y := AVG_PRICE;
    DBMS_OUTPUT.PUT_LINE(Y);
    END;
    /
 -- 3.4 USER DEFINED TABLE VALUED FUNCTIONS 
CREATE TYPE EMPROW AS OBJECT

(

    EMPLOYEEID NUMBER,

    LASTNAME VARCHAR2(100),

    FIRSTNAME VARCHAR2(100),

    TITLE VARCHAR2(100),

    REPORTSTO NUMBER,

    BIRTHDATE DATE,

    HIREDATE DATE,

    ADDRESS	VARCHAR2(100),

    CITY VARCHAR2(100),

    STATE VARCHAR2(100),

    COUNTRY	VARCHAR2(100),

    POSTALCODE VARCHAR2(100),

    PHONE VARCHAR2(100),

    FAX	VARCHAR2(100),

    EMAIL VARCHAR2(100)

);

/



CREATE TYPE EMPTAB AS TABLE OF EMPROW;

/



CREATE OR REPLACE FUNCTION BORNAFTER_1968

RETURN EMPTAB

AS

CURSOR C1 IS SELECT * FROM EMPLOYEE WHERE BIRTHDATE > TO_DATE('31-12-1968', 'DD-MM-YYYY');

EMP_T EMPTAB := EMPTAB();

EMPLOYEEID_V NUMBER;

LASTNAME_V	VARCHAR2(100);

FIRSTNAME_V	VARCHAR2(100);

TITLE_V	VARCHAR2(100);

REPORTSTO_V	NUMBER;

BIRTHDATE_V	DATE;

HIREDATE_V	DATE;

ADDRESS_V	VARCHAR2(100);

CITY_V	VARCHAR2(100);

STATE_V	VARCHAR2(100);

COUNTRY_V	VARCHAR2(100);

POSTALCODE_V	VARCHAR2(100);

PHONE_V	VARCHAR2(100);

FAX_V	VARCHAR2(100);

EMAIL_V	VARCHAR2(100);

BEGIN

    OPEN C1;

    LOOP

        FETCH C1 INTO EMPLOYEEID_V, LASTNAME_V, FIRSTNAME_V, TITLE_V, REPORTSTO_V, BIRTHDATE_V, HIREDATE_V, ADDRESS_V, CITY_V, STATE_V,

        COUNTRY_V, POSTALCODE_V, PHONE_V, FAX_V, EMAIL_V;

        EXIT WHEN C1%NOTFOUND;

        EMP_T.EXTEND;

        EMP_T(EMP_T.LAST) := EMPROW(EMPLOYEEID_V, LASTNAME_V, FIRSTNAME_V, TITLE_V, REPORTSTO_V, BIRTHDATE_V, HIREDATE_V, ADDRESS_V, CITY_V, STATE_V,

        COUNTRY_V, POSTALCODE_V, PHONE_V, FAX_V, EMAIL_V);

    END LOOP;

    CLOSE C1;

    RETURN EMP_T;

END BORNAFTER_1968;

/

-- 4.1 


CREATE OR REPLACE PROCEDURE EMPFULLNAME(EMPRES OUT SYS_REFCURSOR) AS 

BEGIN

OPEN EMPRES FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;

END;

/
--4.2

CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE (EMPLOYEE_ID IN NUMBER, SOME_FN IN VARCHAR2, SOME_LN IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE
    SET LASTNAME = SOME_LN, FIRSTNAME = SOME_FN
    WHERE EMPLOYEE = EMPLOYEE_ID;
    COMMIT;
END; 
/

CREATE OR REPLACE PROCEDURE SP_GET_MANAGER (EMPLOYEE_ID IN NUMBER, MANAGER_ID OUT NUMBER)
IS 
BEGIN
    SELECT REPORTSTO
    INTO MANAGER_ID
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPLOYEE_ID;
END;


--4.3
CREATE OR REPLACE PROCEDURE SP_GET_CUSTOMER (CUST OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUST FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY
    FROM CUSTOMER;
END;
/

DECLARE
    CUST SYS_REFCURSOR;
    SOME_FIRSTN CUSTOMER.FIRSTNAME%TYPE;
    SOME_LASTN CUSTOMER.LASTNAME%TYPE;
    SOME_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    SP_GET_CUSTOMER(CUST);
    LOOP
    FETCH CUST INTO SOME_FIRSTN, SOME_LASTN, SOME_COMP;
    EXIT WHEN CUST%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN||', COMPANY: '||SOME_COMP);
    END LOOP;
    CLOSE CUST;
END; 
/

--5.0
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (INV_ID IN NUMBER)
IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE 
    DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    DELETE INVOICE WHERE INVOICEID = INV_ID;
    COMMIT; 
END;
/




--6.1
--NOT ALLOWED TO MAKE THE SEQUENCE 
CREATE SEQUENCE SQ.EMPLOYEE_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ.EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END; 
/

CREATE SEQUENCE SQ_ALBUM_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    SELECT SQ_ALBUM_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_CUSTOMER_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT SQ_CUSTOMER_PK.NEXTVAL INTO :NEW.CUSTOMERID FROM DUAL;
END;
/

--7.1

SELECT LASTNAME, FIRSTNAME, INVOICEID 
FROM CUSTOMER 
INNER JOIN INVOICE 
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.2

SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
LEFT OUTER JOIN INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.3

SELECT NAME, TITLE
FROM ARTIST 
RIGHT OUTER JOIN ALBUM
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4

SELECT NAME
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME ASC;

--7.5

SELECT *--A.EMPLOYEEID, B.EMPLOYEEID, A.LASTNAME, B.LASTNAME, A.TITLE, B.TITLE
FROM EMPLOYEE A
INNER JOIN EMPLOYEE B
ON B.EMPLOYEEID = A.REPORTSTO;




commit;
exit;
 
